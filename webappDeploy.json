{
	"$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"environment": {
			"type": "string",
			"defaultValue": "dev",
			"metadata": {
				"description": "The DTAP environment we are deploying for, defaults to 'dev'"
			}
		},
		"location": {
			"type": "string",
			"defaultValue": "[resourceGroup().location]",
			"metadata": {
				"description": "The OMS instance name to push the log analytics for the cache to "
			}
		},
		"releaseNumber": {
			"type": "string",
			"defaultValue": "0",
			"metadata": {
				"description": "The release number used to identify on a web app level what version of the infra scripts has been deployed"
			}
		},
		"appServicePlanName": {
			"type": "string",
			"defaultValue": "[concat(parameters('environment'), '-in-', parameters('location'))]",
			"metadata": {
				"description": "The name for the app service plan that provides the resources for the Web Apps"
			}
		},
		"appServicePlanTier": {
			"type": "string",
			"defaultValue": "S1",
			"allowedValues": [
				"S1",
				"S2",
				"S3",
				"P1",
				"P2",
				"P3",
				"P1v2",
				"P2v2",
				"P3v2"
			],
			"metadata": {
				"description": "The tier for the app service plan instancess"
			}
		},
		"appServicePlanCapacity": {
			"type": "int",
			"defaultValue": 1,
			"minValue": 1,
			"maxValue": 10,
			"metadata": {
				"description": "Horizontal scaling param (i.e. the number of machines in the app service plan)"
			}
		},
		"appServicePlanAutoscalingEnabled": {
			"type": "bool",
			"defaultValue": "[bool('True')]",
			"metadata": {
				"description": "Indicates if autoscaling should be enabled for the App Service Plan (defaults to false)"
			}
		},
		"appServicePlanInstancesDefault": {
			"type": "string",
			"defaultValue": "1",
			"metadata": {
				"description": "The default number of instances to deploy for the Frontend webapp (ignored if appServicePlanAutoscalingEnabled is false)"
			}
		},
		"appServicePlanInstancesMin": {
			"type": "string",
			"defaultValue": "1",
			"metadata": {
				"description": "The minimal number of instances that should be deployed at any time (ignored if appServicePlanAutoscalingEnabled is false)"
			}
		},
		"appServicePlanInstancesMax": {
			"type": "string",
			"defaultValue": "4",
			"metadata": {
				"description": "The maximum number of instances that should be deployed at any time (ignored if appServicePlanAutoscalingEnabled is false)"
			}
		},
		"appServicePlanAutoscalingThresholdUp": {
			"type": "int",
			"defaultValue": 80,
			"metadata": {
				"description": "When the average CPU utilization gets higher than this threshold, the App Service Plan will scale up"
			}
		},
		"appServicePlanAutoscalingThresholdDown": {
			"type": "int",
			"defaultValue": 80,
			"metadata": {
				"description": "When the average CPU utilization gets lower than this threshold, the App Service Plan will scale down"
			}
		},
		"webAppFrontendName": {
			"type": "string",
			"defaultValue": "[concat(parameters('environment'), '-wa-', parameters('location'))]",
			"metadata": {
				"description": "The name for the WebApp hosting the frontend code"
			}
		},
		"warmupSlotName": {
			"type": "string",
			"defaultValue": "staging",
			"metadata": {
				"description": "Warmup slot name for the frontend slot based deployment"
			}
		},
		"appinsightsInstrumentationkey": {
			"type": "string",
			"defaultValue": "",
			"metadata": {
				"description": "Application setting for webapp to link it to app insights"
			}
		},
		"azureStorageAccount": {
			"type": "string",
			"defaultValue": "[concat(parameters('environment'), 'app', parameters('location'))]",
			"metadata": {
				"description": "Azure storage account for app data"
			}
		},
		"azureStorageAccountkey": {
			"type": "string",
			"defaultValue": "[concat(parameters('environment'), 'app', parameters('location'))]",
			"metadata": {
				"description": "Azure storage account for app data"
			}
		},
		"azureStorageAccountString": {
			"type": "string",
			"defaultValue": "[concat('DefaultEndpointsProtocol=https;AccountName=',parameters('azureStorageAccount'),';AccountKey=', parameters('azureStorageAccount'))]",
			"metadata": {
				"description": "Azure storage account for app data"
			}
		},
		"developmentServer": {
			"type": "string",
			"defaultValue": "1",
			"metadata": {
				"description": "Application setting for webapp marking it as a dev server"
			}
		},
		"disableDebugLogging": {
			"type": "string",
			"defaultValue": "0",
			"metadata": {
				"description": "Application setting for webapp to diable debug logging level"
			}
		},
		"encryptionKey": {
			"type": "string",
			"defaultValue": "someKey",
			"metadata": {
				"description": "Encryption key for.. encryption"
			}
		},
		"envContext": {
			"type": "string",
			"defaultValue": "PRODUCTION",
			"metadata": {
				"description": "Application setting for webapp indicating the environment context"
			}
		},
		"sendgridApiKey": {
			"type": "string",
			"defaultValue": "someKey",
			"metadata": {
				"description": "Sendgrid API Key"
			}
		},
		"sqlServerName": {
			"type": "string",
			"defaultValue": "myDBServer",
			"metadata": {
				"description": "The SQL server endpoint"
			}
		},
		"sqlServerDatabase": {
			"type": "string",
			"defaultValue": "myDBName",
			"metadata": {
				"description": "The database name to use"
			}
		},
		"sqlServerUser": {
			"type": "string",
			"defaultValue": "myDBUsername",
			"metadata": {
				"description": "The database user to connect with"
			}
		},
		"sqlServerPassword": {
			"type": "securestring",
			"defaultValue": "myDBPassword",
			"metadata": {
				"description": "The database user's password"
			}
		},
		"dockerImageName": {
			"type": "String",
			"defaultValue": "_MY_REGISTRY_USERNAME_-on.azurecr.io/_MY_NAMESPACE_/_MY_DOCKER_IMAGE_NAME_:latest"
		},
		"dockerRegistryUrl": {
			"type": "String",
			"defaultValue": "https://_MY_REGISTRY_USERNAME_-on.azurecr.io"
		},
		"dockerRegistryUsername": {
			"type": "String",
			"defaultValue": "_MY_REGISTRY_USERNAME_"
		},
		"dockerRegistryPassword": {
			"type": "String",
			"defaultValue": "_MY_REGISTRY_PSW_"
		},
		"linuxFxVersion": {
			"type": "String",
			"defaultValue": "Docker|Nginx"
		}
	},
	"variables": {
		"webAppAutoscaleName": "[concat(parameters('environment'), '-FE-autoscaling')]"
	},
	"resources": [{
			"apiVersion": "2016-09-01",
			"name": "[parameters('appServicePlanName')]",
			"type": "Microsoft.Web/serverfarms",
			"kind": "linux",
			"location": "[resourceGroup().location]",
			"sku": {
				"name": "[parameters('appServicePlanTier')]",
				"capacity": "[int(parameters('appServicePlanCapacity'))]"
			},
			"tags": {
				"displayName": "[parameters('appServicePlanName')]",
				"description": "The app service plan in which we deploy several instances of the web apps",
				"environment": "[parameters('environment')]",
				"releaseNumber": "[parameters('releaseNumber')]"
			},
			"properties": {
				"workerSizeId": 0,
				"reserved": true,
				"hostingEnvironment": ""
			}
		},
		{
			"condition": "[parameters('appServicePlanAutoscalingEnabled')]",
			"type": "Microsoft.Insights/autoscalesettings",
			"name": "[variables('webAppAutoscaleName')]",
			"apiVersion": "2014-04-01",
			"location": "[resourceGroup().location]",
			"properties": {
				"profiles": [
            {
                "name": "Auto created scale condition 1",
                "capacity": {
                    "minimum": 4,
                    "maximum": 4,
                    "default": 4
                },
                "rules": [],
                "recurrence": {
                    "frequency": "Week",
                    "schedule": {
                        "timeZone": "W. Europe Standard Time",
                        "days": [
                            "Monday",
                            "Tuesday",
                            "Wednesday",
                            "Thursday",
                            "Friday"
                        ],
                        "hours": [
                            9
                        ],
                        "minutes": [
                            0
                        ]
                    }
                }
            },
            {
                "name": "{\"name\":\"Auto created scale condition\",\"for\":\"Auto created scale condition 1\"}",
                "capacity": {
                    "minimum": 1,
                    "maximum": 1,
                    "default": 1
                },
                "rules": [],
                "recurrence": {
                    "frequency": "Week",
                    "schedule": {
                        "timeZone": "W. Europe Standard Time",
                        "days": [
                            "Monday",
                            "Tuesday",
                            "Wednesday",
                            "Thursday",
                            "Friday"
                        ],
                        "hours": [
                            18
                        ],
                        "minutes": [
                            0
                        ]
                    }
                }
            }
        ],
				"enabled": true,
				"name": "[variables('webAppAutoscaleName')]",
				"targetResourceUri": "[resourceId('Microsoft.Web/serverfarms', parameters('appServicePlanName'))]"
			},
			"dependsOn": [
				"[resourceId('Microsoft.Web/serverfarms', parameters('appServicePlanName'))]"
			]
		},
		{
			"apiVersion": "2016-08-01",
			"name": "[parameters('webAppFrontendName')]",
			"type": "Microsoft.Web/sites",
			"kind": "app",
			"location": "[resourceGroup().location]",
			"tags": {
				"displayName": "[parameters('webAppFrontendName')]",
				"description": "The Web app hosting the frontend code",
				"environment": "[parameters('environment')]",
				"releaseNumber": "[parameters('releaseNumber')]"
			},
			"dependsOn": [
				"[concat('Microsoft.Web/serverfarms/', parameters('appServicePlanName'))]"
			],
			"properties": {
				"name": "[parameters('webAppFrontendName')]",
				"serverFarmId": "[resourceId('Microsoft.Web/serverfarms/', parameters('appServicePlanName'))]",
				"siteConfig": {
					"name": "[parameters('appServicePlanName')]",
					"linuxFxVersion": "[parameters('linuxFxVersion')]",
					"AlwaysOn": true
				}
			},
			"resources": [{
					"apiVersion": "2016-08-01",
					"name": "appsettings",
					"type": "config",
					"dependsOn": [
						"[resourceId('Microsoft.Web/Sites', parameters('webAppFrontendName'))]"
					],
					"properties": {
						"APPINSIGHTS_INSTRUMENTATIONKEY": "[parameters('appinsightsInstrumentationkey')]",
						"AZURE_STORAGE_ACCESS_KEY": "[parameters('azureStorageAccountkey')]",
						"AZURE_STORAGE_ACCOUNT": "[parameters('azureStorageAccount')]",
						"AZURE_STORAGE_CONNECTION_STRING": "[parameters('azureStorageAccountString')]",
						"DEVELOPMENT_SERVER": "[parameters('developmentServer')]",
						"DISABLE_DEBUG_LOGGING": "[parameters('disableDebugLogging')]",
						"encryptionKey": "[parameters('encryptionKey')]",
						"ENV_CONTEXT": "[parameters('envContext')]",					
						"sql_repository_server": "[parameters('sqlServerName')]",
						"sql_repository_database": "[parameters('sqlServerDatabase')]",
						"sql_repository_user": "[parameters('sqlServerUser')]",
						"sql_repository_password": "[parameters('sqlServerPassword')]",
						"DOCKER_CUSTOM_IMAGE_NAME": "[parameters('dockerImageName')]",
						"DOCKER_REGISTRY_SERVER_URL": "[parameters('dockerRegistryUrl')]",
						"DOCKER_REGISTRY_SERVER_USERNAME": "[parameters('dockerRegistryUsername')]",
						"DOCKER_REGISTRY_SERVER_PASSWORD": "[parameters('dockerRegistryPassword')]"
					}
				},
				{
					"apiVersion": "2016-08-01",
					"name": "[parameters('warmupSlotName')]",
					"type": "slots",
					"kind": "app,linux,container",
					"location": "[resourceGroup().location]",
					"tags": {
						"displayName": "[parameters('warmupSlotName')]",
						"description": "A warmup slot for new releases of the frontend web app",
						"environment": "[parameters('environment')]",
						"releaseNumber": "[parameters('releaseNumber')]"
					},
					"dependsOn": [
						"[resourceId('Microsoft.Web/Sites', parameters('webAppFrontendName'))]"
					],
					"properties": {
						"siteConfig": {
							"name": "[parameters('appServicePlanName')]",
							"linuxFxVersion": "[parameters('linuxFxVersion')]",
							"AlwaysOn": true
						}
					},
					"resources": [{
						"apiVersion": "2016-08-01",
						"name": "appsettings",
						"type": "config",
						"dependsOn": [
							"[resourceId('Microsoft.Web/Sites/Slots', parameters('webAppFrontendName'), parameters('warmupSlotName'))]"
						],
						"properties": {
							"APPINSIGHTS_INSTRUMENTATIONKEY": "[parameters('appinsightsInstrumentationkey')]",
							"AZURE_STORAGE_ACCESS_KEY": "[parameters('azureStorageAccountkey')]",
							"AZURE_STORAGE_ACCOUNT": "[parameters('azureStorageAccount')]",
							"AZURE_STORAGE_CONNECTION_STRING": "[parameters('azureStorageAccountString')]",
							"DEVELOPMENT_SERVER": "[parameters('developmentServer')]",
							"DISABLE_DEBUG_LOGGING": "[parameters('disableDebugLogging')]",
							"encryptionKey": "[parameters('encryptionKey')]",
							"ENV_CONTEXT": "[parameters('envContext')]",					
							"sql_repository_server": "[parameters('sqlServerName')]",
							"sql_repository_database": "[parameters('sqlServerDatabase')]",
							"sql_repository_user": "[parameters('sqlServerUser')]",
							"sql_repository_password": "[parameters('sqlServerPassword')]",
							"DOCKER_CUSTOM_IMAGE_NAME": "[parameters('dockerImageName')]",
							"DOCKER_REGISTRY_SERVER_URL": "[parameters('dockerRegistryUrl')]",
							"DOCKER_REGISTRY_SERVER_USERNAME": "[parameters('dockerRegistryUsername')]",
							"DOCKER_REGISTRY_SERVER_PASSWORD": "[parameters('dockerRegistryPassword')]"
						}
					}]
				}
			]
		}
	],
	"outputs": {
		"outboundIps": {
			"type": "string",
			"value": "[reference(resourceId('Microsoft.Web/sites',parameters('webAppFrontendName'))).OutboundIpAddresses]"
		},
		"webAppName": {
			"type": "string",
			"value": "[parameters('webAppFrontendName')]"
		}
	}
}